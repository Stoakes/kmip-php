<?php

/**
 * DO NOT EDIT. This file is auto-generated by stoakes/kmip-php code generator
 */

declare(strict_types=1);

namespace Stoakes\Kmip\Enum;

enum NISTKeyType: int
{
    /** 0x00000001 */
    case PrivateSignatureKey = 1;

    /** 0x00000002 */
    case PublicSignatureVerificationKey = 2;

    /** 0x00000003 */
    case SymmetricAuthenticationKey = 3;

    /** 0x00000004 */
    case PrivateAuthenticationKey = 4;

    /** 0x00000005 */
    case PublicAuthenticationKey = 5;

    /** 0x00000006 */
    case SymmetricDataEncryptionKey = 6;

    /** 0x00000007 */
    case SymmetricKeyWrappingKey = 7;

    /** 0x00000008 */
    case SymmetricRandomNumberGenerationKey = 8;

    /** 0x00000009 */
    case SymmetricMasterKey = 9;

    /** 0x0000000A */
    case PrivateKeyTransportKey = 10;

    /** 0x0000000B */
    case PublicKeyTransportKey = 11;

    /** 0x0000000C */
    case SymmetricKeyAgreementKey = 12;

    /** 0x0000000D */
    case PrivateStaticKeyAgreementKey = 13;

    /** 0x0000000E */
    case PublicStaticKeyAgreementKey = 14;

    /** 0x0000000F */
    case PrivateEphemeralKeyAgreementKey = 15;

    /** 0x00000010 */
    case PublicEphemeralKeyAgreementKey = 16;

    /** 0x00000011 */
    case SymmetricAuthorizationKey = 17;

    /** 0x00000012 */
    case PrivateAuthorizationKey = 18;

    /** 0x00000013 */
    case PublicAuthorizationKey = 19;

    public function valueToCanonicalName(self $value): string
    {
        return match($value) {
            self::PrivateSignatureKey => 'Private signature key',
            self::PublicSignatureVerificationKey => 'Public signature verification key',
            self::SymmetricAuthenticationKey => 'Symmetric authentication key',
            self::PrivateAuthenticationKey => 'Private authentication key',
            self::PublicAuthenticationKey => 'Public authentication key',
            self::SymmetricDataEncryptionKey => 'Symmetric data encryption key',
            self::SymmetricKeyWrappingKey => 'Symmetric key wrapping key',
            self::SymmetricRandomNumberGenerationKey => 'Symmetric random number generation key',
            self::SymmetricMasterKey => 'Symmetric master key',
            self::PrivateKeyTransportKey => 'Private key transport key',
            self::PublicKeyTransportKey => 'Public key transport key',
            self::SymmetricKeyAgreementKey => 'Symmetric key agreement key',
            self::PrivateStaticKeyAgreementKey => 'Private static key agreement key',
            self::PublicStaticKeyAgreementKey => 'Public static key agreement key',
            self::PrivateEphemeralKeyAgreementKey => 'Private ephemeral key agreement key',
            self::PublicEphemeralKeyAgreementKey => 'Public ephemeral key agreement key',
            self::SymmetricAuthorizationKey => 'Symmetric authorization key',
            self::PrivateAuthorizationKey => 'Private authorization key',
            self::PublicAuthorizationKey => 'Public authorization key',
        };
    }

    public function canonicalName(): string
    {
        return self::valueToCanonicalName($this);
    }
}
