<?php

/**
 * DO NOT EDIT. This file is auto-generated by stoakes/kmip-php code generator
 */

declare(strict_types=1);

namespace Stoakes\Kmip\Enum;

enum ResultReason: int
{
    /** 0x00000001 */
    case ItemNotFound = 1;

    /** 0x00000002 */
    case ResponseTooLarge = 2;

    /** 0x00000003 */
    case AuthenticationNotSuccessful = 3;

    /** 0x00000004 */
    case InvalidMessage = 4;

    /** 0x00000005 */
    case OperationNotSupported = 5;

    /** 0x00000006 */
    case MissingData = 6;

    /** 0x00000007 */
    case InvalidField = 7;

    /** 0x00000008 */
    case FeatureNotSupported = 8;

    /** 0x00000009 */
    case OperationCanceledByRequester = 9;

    /** 0x0000000A */
    case CryptographicFailure = 10;

    /** 0x0000000B */
    case IllegalOperation = 11;

    /** 0x0000000C */
    case PermissionDenied = 12;

    /** 0x0000000D */
    case ObjectArchived = 13;

    /** 0x0000000E */
    case IndexOutOfBounds = 14;

    /** 0x0000000F */
    case ApplicationNamespaceNotSupported = 15;

    /** 0x00000010 */
    case KeyFormatTypeNotSupported = 16;

    /** 0x00000011 */
    case KeyCompressionTypeNotSupported = 17;

    /** 0x00000012 */
    case EncodingOptionError = 18;

    /** 0x00000013 */
    case KeyValueNotPresent = 19;

    /** 0x00000014 */
    case AttestationRequired = 20;

    /** 0x00000015 */
    case AttestationFailed = 21;

    /** 0x00000016 */
    case Sensitive = 22;

    /** 0x00000017 */
    case NotExtractable = 23;

    /** 0x00000018 */
    case ObjectAlreadyExists = 24;

    /** 0x00000019 */
    case InvalidTicket = 25;

    /** 0x0000001A */
    case UsageLimitExceeded = 26;

    /** 0x0000001B */
    case NumericRange = 27;

    /** 0x0000001C */
    case InvalidDataType = 28;

    /** 0x0000001D */
    case ReadOnlyAttribute = 29;

    /** 0x0000001E */
    case MultiValuedAttribute = 30;

    /** 0x0000001F */
    case UnsupportedAttribute = 31;

    /** 0x00000020 */
    case AttributeInstanceNotFound = 32;

    /** 0x00000021 */
    case AttributeNotFound = 33;

    /** 0x00000022 */
    case AttributeReadOnly = 34;

    /** 0x00000023 */
    case AttributeSingleValued = 35;

    /** 0x00000024 */
    case BadCryptographicParameters = 36;

    /** 0x00000025 */
    case BadPassword = 37;

    /** 0x00000026 */
    case CodecError = 38;

    /** 0x00000028 */
    case IllegalObjectType = 40;

    /** 0x00000029 */
    case IncompatibleCryptographicUsageMask = 41;

    /** 0x0000002A */
    case InternalServerError = 42;

    /** 0x0000002B */
    case InvalidAsynchronousCorrelationValue = 43;

    /** 0x0000002C */
    case InvalidAttribute = 44;

    /** 0x0000002D */
    case InvalidAttributeValue = 45;

    /** 0x0000002E */
    case InvalidCorrelationValue = 46;

    /** 0x0000002F */
    case InvalidCSR = 47;

    /** 0x00000030 */
    case InvalidObjectType = 48;

    /** 0x00000032 */
    case KeyWrapTypeNotSupported = 50;

    /** 0x00000034 */
    case MissingInitializationVector = 52;

    /** 0x00000035 */
    case NonUniqueNameAttribute = 53;

    /** 0x00000036 */
    case ObjectDestroyed = 54;

    /** 0x00000037 */
    case ObjectNotFound = 55;

    /** 0x00000039 */
    case NotAuthorized = 57;

    /** 0x0000003A */
    case ServerLimitExceeded = 58;

    /** 0x0000003B */
    case UnknownEnumeration = 59;

    /** 0x0000003C */
    case UnknownMessageExtension = 60;

    /** 0x0000003D */
    case UnknownTag = 61;

    /** 0x0000003E */
    case UnsupportedCryptographicParameters = 62;

    /** 0x0000003F */
    case UnsupportedProtocolVersion = 63;

    /** 0x00000040 */
    case WrappingObjectArchived = 64;

    /** 0x00000041 */
    case WrappingObjectDestroyed = 65;

    /** 0x00000042 */
    case WrappingObjectNotFound = 66;

    /** 0x00000043 */
    case WrongKeyLifecycleState = 67;

    /** 0x00000044 */
    case ProtectionStorageUnavailable = 68;

    /** 0x00000045 */
    case PKCS_11CodecError = 69;

    /** 0x00000046 */
    case PKCS_11InvalidFunction = 70;

    /** 0x00000047 */
    case PKCS_11InvalidInterface = 71;

    /** 0x00000100 */
    case GeneralFailure = 256;

    public function valueToCanonicalName(self $value): string
    {
        return match($value) {
            self::ItemNotFound => 'Item Not Found',
            self::ResponseTooLarge => 'Response Too Large',
            self::AuthenticationNotSuccessful => 'Authentication Not Successful',
            self::InvalidMessage => 'Invalid Message',
            self::OperationNotSupported => 'Operation Not Supported',
            self::MissingData => 'Missing Data',
            self::InvalidField => 'Invalid Field',
            self::FeatureNotSupported => 'Feature Not Supported',
            self::OperationCanceledByRequester => 'Operation Canceled By Requester',
            self::CryptographicFailure => 'Cryptographic Failure',
            self::IllegalOperation => 'Illegal Operation',
            self::PermissionDenied => 'Permission Denied',
            self::ObjectArchived => 'Object archived',
            self::IndexOutOfBounds => 'Index Out of Bounds',
            self::ApplicationNamespaceNotSupported => 'Application Namespace Not Supported',
            self::KeyFormatTypeNotSupported => 'Key Format Type Not Supported',
            self::KeyCompressionTypeNotSupported => 'Key Compression Type Not Supported',
            self::EncodingOptionError => 'Encoding Option Error',
            self::KeyValueNotPresent => 'Key Value Not Present',
            self::AttestationRequired => 'Attestation Required',
            self::AttestationFailed => 'Attestation Failed',
            self::Sensitive => 'Sensitive',
            self::NotExtractable => 'Not Extractable',
            self::ObjectAlreadyExists => 'Object Already Exists',
            self::InvalidTicket => 'Invalid Ticket',
            self::UsageLimitExceeded => 'Usage Limit Exceeded',
            self::NumericRange => 'Numeric Range',
            self::InvalidDataType => 'Invalid Data Type',
            self::ReadOnlyAttribute => 'Read Only Attribute',
            self::MultiValuedAttribute => 'Multi Valued Attribute',
            self::UnsupportedAttribute => 'Unsupported Attribute',
            self::AttributeInstanceNotFound => 'Attribute Instance Not Found',
            self::AttributeNotFound => 'Attribute Not Found',
            self::AttributeReadOnly => 'Attribute Read Only',
            self::AttributeSingleValued => 'Attribute Single Valued',
            self::BadCryptographicParameters => 'Bad Cryptographic Parameters',
            self::BadPassword => 'Bad Password',
            self::CodecError => 'Codec Error',
            self::IllegalObjectType => 'Illegal Object Type',
            self::IncompatibleCryptographicUsageMask => 'Incompatible Cryptographic Usage Mask',
            self::InternalServerError => 'Internal Server Error',
            self::InvalidAsynchronousCorrelationValue => 'Invalid Asynchronous Correlation Value',
            self::InvalidAttribute => 'Invalid Attribute',
            self::InvalidAttributeValue => 'Invalid Attribute Value',
            self::InvalidCorrelationValue => 'Invalid Correlation Value',
            self::InvalidCSR => 'Invalid CSR',
            self::InvalidObjectType => 'Invalid Object Type',
            self::KeyWrapTypeNotSupported => 'Key Wrap Type Not Supported',
            self::MissingInitializationVector => 'Missing Initialization Vector',
            self::NonUniqueNameAttribute => 'Non Unique Name Attribute',
            self::ObjectDestroyed => 'Object Destroyed',
            self::ObjectNotFound => 'Object Not Found',
            self::NotAuthorized => 'Not Authorized',
            self::ServerLimitExceeded => 'Server Limit Exceeded',
            self::UnknownEnumeration => 'Unknown Enumeration',
            self::UnknownMessageExtension => 'Unknown Message Extension',
            self::UnknownTag => 'Unknown Tag',
            self::UnsupportedCryptographicParameters => 'Unsupported Cryptographic Parameters',
            self::UnsupportedProtocolVersion => 'Unsupported Protocol Version',
            self::WrappingObjectArchived => 'Wrapping Object Archived',
            self::WrappingObjectDestroyed => 'Wrapping Object Destroyed',
            self::WrappingObjectNotFound => 'Wrapping Object Not Found',
            self::WrongKeyLifecycleState => 'Wrong Key Lifecycle State',
            self::ProtectionStorageUnavailable => 'Protection Storage Unavailable',
            self::PKCS_11CodecError => 'PKCS#11 Codec Error ',
            self::PKCS_11InvalidFunction => 'PKCS#11 Invalid Function ',
            self::PKCS_11InvalidInterface => 'PKCS#11 Invalid Interface',
            self::GeneralFailure => 'General Failure',
        };
    }

    public function canonicalName(): string
    {
        return self::valueToCanonicalName($this);
    }
}
